@{
    ViewData["Title"] = "Products";
    var products = ViewBag.Products as List<ProductSalesApp.Models.Product>;
}

<a href="/Sales/Home" style="text-decoration: none;">
    <div style="
        position: absolute;
        top: 120px;
        left: 80px;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        z-index: 10;
    ">
        <img src="~/images/icon.png" style="width: 30px; height: 30px;" />
    </div>
</a>

<div class="container my-4">
    <h1 class="mb-4 text-center">Products</h1>
    <div id="product-list">
        @await Html.PartialAsync("_ProductListPartial", products)
    </div>

    <hr class="my-5" />

    <h2 class="mb-3">🛒 Shopping Cart</h2>
    <div id="cart-container">
        @await Html.PartialAsync("_CartPartial")
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            bindAddToCartForms();
            bindRemoveFromCartForms();
        });

        function bindAddToCartForms() {
            document.querySelectorAll(".add-to-cart-form").forEach(form => {
                form.addEventListener("submit", function (e) {
                    e.preventDefault();

                    const formData = new FormData(form);

                    fetch(form.action, {
                        method: "POST",
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            updateUI();
                            showToast('successToast', data.message);
                        } else {
                            showToast('errorToast', data.message);
                        }
                    })
                    .catch(error => console.error("Error:", error));
                });
            });
        }

        function bindRemoveFromCartForms() {
            document.querySelectorAll(".remove-from-cart-form").forEach(form => {
                form.addEventListener("submit", function (e) {
                    e.preventDefault();

                    const formData = new FormData(form);

                    fetch(form.action, {
                        method: "POST",
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            updateUI();
                            showToast('successToast', data.message);
                        } else {
                            showToast('errorToast', data.message);
                        }
                    })
                    .catch(error => console.error("Error:", error));
                });
            });
        }

        function updateUI() {
            fetch('/Sales/GetProductList')
                .then(response => response.text())
                .then(html => {
                    document.getElementById("product-list").innerHTML = html;
                    bindAddToCartForms();
                });

            fetch('/Sales/GetCartPartial')
                .then(response => response.text())
                .then(html => {
                    document.getElementById("cart-container").innerHTML = html;
                    bindRemoveFromCartForms();
                });

            fetch('/Sales/GetCartSummary')
                .then(response => response.text())
                .then(html => {
                    const summary = document.getElementById("cart-summary");
                    if (summary) summary.innerHTML = html;
                });
        }

        function showToast(toastId, message) {
            const toastEl = document.getElementById(toastId);
            toastEl.querySelector('.toast-body').textContent = message;
            const toast = new bootstrap.Toast(toastEl, { delay: 1500 });
            toast.show();
        }
    </script>
}












